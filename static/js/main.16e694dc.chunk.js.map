{"version":3,"sources":["components/Row.js","components/Column.js","components/CategoryGroup.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Row","row","cardData","data","category","find","colNum","id","className","label","description","role","aria-valuenow","aria-valuemin","aria-valuemax","stars","icon","numbro","format","output","Column","col","rowIterator","rowSpaceClass","map","index","key","CategoryGroup","Footer","App","Boolean","window","location","hostname","match","library","add","faAngleRight","faChartBar","faStar","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oSAkCeA,MA7Bf,SAAaC,GACT,IAAMC,EAAWC,EAAKF,EAAIG,SAASA,UAAUC,MAAK,SAAAD,GAChD,OAAOH,EAAIK,SAAWF,EAASG,MAEjC,OACE,yBAAKC,UAAU,wBACb,yBAAKA,UAAU,mBACb,4BAAKN,EAASO,OACd,2BAAIP,EAASQ,aACb,yBAAKF,UAAU,iBACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,2BACb,yBAAKA,UAAU,kCAAkCG,KAAK,cAAcC,gBAAc,KAAKC,gBAAc,IAAIC,gBAAc,UAG3H,yBAAKN,UAAU,sBACZN,EAASa,MADZ,IACmB,kBAAC,IAAD,CAAiBC,KAAK,UAEzC,yBAAKR,UAAU,sBACXS,IAAOf,EAASK,IAAIW,OAAO,CAACC,OAAQ,YADxC,IACsD,kBAAC,IAAD,CAAiBH,KAAK,gBAG9E,4BAAQR,UAAU,6BAAlB,YAAuD,kBAAC,IAAD,CAAiBQ,KAAK,oBCGxEI,MA3Bf,SAAgBC,GACZ,IAAIC,EAAc,CAAC,EAAG,EAAG,GACrBC,EAAgB,OAcpB,MAZ6B,cAA1BF,EAAIjB,SAASA,SACXiB,EAAIpB,IAAM,IACXqB,EAAc,CAAC,GACfC,EAAgB,QAGfF,EAAIpB,IAAM,IACXqB,EAAc,CAAC,EAAG,GAClBC,EAAgB,QAKlB,yBAAKf,UAAS,oCAA+Be,EAA/B,eAEZD,EAAYE,KAAI,SAACvB,EAAKwB,GAAN,OACd,kBAAC,EAAD,CAAKC,IAAKzB,EAAKK,OAAQL,EAAKG,SAAUiB,EAAIjB,gBCVrCuB,MAVf,SAAuBvB,GAEnB,MADa,CAAC,EAAG,GAERoB,KAAI,SAACvB,EAAKwB,GAAN,OACP,kBAAC,EAAD,CAAQC,IAAKD,EAAOxB,IAAKA,EAAKG,SAAUA,QCGjCwB,MARjB,WACI,OACE,yBAAKpB,UAAU,wCAAf,SCqBSqB,MApBf,WAEE,OACE,wCACA,yBAAKrB,UAAU,aACb,wBAAIA,UAAU,oBAAd,QAJa,CAAC,YAAa,UAMZgB,KAAI,SAACpB,EAAUsB,GAAX,OACb,oCAAgBA,IAAKA,GACnB,wBAAIlB,UAAU,eAAeJ,GAC3B,kBAAC,EAAD,CAAeA,SAAUA,SAKnC,kBAAC,EAAD,QCRc0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCVNC,IAAQC,IAAIC,IAAcC,IAAYC,KAEtCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.16e694dc.chunk.js","sourcesContent":["import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport numbro from 'numbro';\nimport data from '../data.json';\n\nfunction Row(row){\n    const cardData = data[row.category.category].find(category=>{\n      return row.colNum === category.id;\n    })\n    return (\n      <div className=\"card webmd-card mb-0\">\n        <div className=\"webmd-card-body\">\n          <h3>{cardData.label}</h3>\n          <p>{cardData.description}</p>            \n          <div className=\"row webmd-row\">\n            <div className=\"col-sm\">\n              <div className=\"progress webmd-progress\">\n                <div className=\"progress-bar webmd-progress-bar\" role=\"progressbar\" aria-valuenow=\"75\" aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\n              </div>\n            </div>\n            <div className=\"col-sm webmd-stats\">\n              {cardData.stars} <FontAwesomeIcon icon=\"star\" />\n            </div>\n            <div className=\"col-sm webmd-stats\">\n              { numbro(cardData.id).format({output: \"ordinal\"}) } <FontAwesomeIcon icon=\"chart-bar\" />\n            </div>\n          </div>\n          <button className=\"btn btn-link webmd-button\">Continue <FontAwesomeIcon icon=\"angle-right\" /></button>\n        </div>\n      </div>\n    )\n  }\n\n\nexport default Row;","import React from 'react';\nimport Row from './Row';\n\nfunction Column(col){\n    let rowIterator = [1, 2, 3];\n    let rowSpaceClass = 'mb-3';\n  \n    if(col.category.category === 'Computers'){\n      if(col.row > 1) {\n        rowIterator = [4];\n        rowSpaceClass = 'mb-5';\n      }\n    }else{\n      if(col.row > 1) {\n        rowIterator = [4, 5];\n        rowSpaceClass = 'mb-5';\n      }\n    }\n  \n    return(\n      <div className={`card-deck webmd-card-deck ${rowSpaceClass} text-left`}>\n        {\n        rowIterator.map((row, index) =>   \n          <Row key={row} colNum={row} category={col.category} />\n        )}        \n    </div>\n    );\n  }\n\n\nexport default Column;","import React from 'react';\nimport Column from './Column';\n\nfunction CategoryGroup(category){\n    const rows = [1, 2];\n    return (        \n        rows.map((row, index) =>      \n          <Column key={index} row={row} category={category}/>\n      )\n    )\n  }\n\n\nexport default CategoryGroup;","import React from 'react';\n\nfunction Footer(){\n    return(\n      <nav className=\"navbar webmd-navbar navbar-expand-lg\">\n        Logo    \n      </nav>\n    )\n  }\n\n  export default Footer;","import React from 'react';\nimport './App.scss';\nimport CategoryGroup from './components/CategoryGroup';\nimport Footer from './components/Footer';\n\nfunction App() {\n  let categories = ['Computers', 'Movies']\n  return (\n    <React-Fragment>\n    <div className=\"container\">\n      <h2 className=\"webmd-logo-label\">Logo</h2>\n        {\n          categories.map((category, key) =>\n            <React-Fragment key={key}>\n              <h1 className=\"webmd-label\">{category}</h1>\n                <CategoryGroup category={category} />\n            </React-Fragment>\n          )\n        }\n      </div>\n      <Footer/>  \n      </React-Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faAngleRight, faChartBar, faStar } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faAngleRight, faChartBar, faStar)\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}